import { useAppSelector } from './store';
import { selectCurrentUser } from '../features/auth/authSlice';

type UseQueryResult<T> = {
  // Base query state
  originalArgs?: unknown // Arguments passed to the query
  data?: T // The latest returned result regardless of hook arg, if present
  currentData?: T // The latest returned result for the current hook arg, if present
  error?: unknown // Error result if present
  requestId?: string // A string generated by RTK Query
  endpointName?: string // The name of the given endpoint for the query
  startedTimeStamp?: number // Timestamp for when the query was initiated
  fulfilledTimeStamp?: number // Timestamp for when the query was completed

  // Derived request status booleans
  isUninitialized: boolean // Query has not started yet.
  isLoading: boolean // Query is currently loading for the first time. No data yet.
  isFetching: boolean // Query is currently fetching, but might have data from an earlier request.
  isSuccess: boolean // Query has data from a successful load.
  isError: boolean // Query is currently in an "error" state.

  refetch: () => Promise<any> // A function to force refetch the query - returns a Promise with additional methods
}

/**
 * this custom is general purpose is to refetch data when argument changes
 * @param {Function} useQuery_ - any rtk query hook 
 * @returns {Object} result  - rtk query result
 */
function useAfterRefreshQuery<T>(useQuery_): UseQueryResult<T> {
  const user = useAppSelector(selectCurrentUser);

  return useQuery_(user);
}

export default useAfterRefreshQuery;
